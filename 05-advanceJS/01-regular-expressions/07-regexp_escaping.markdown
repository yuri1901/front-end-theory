# Детальний конспект: Екранування в регулярних виразах

## Загальна інформація

- **Опис**: Екранування в регулярних виразах дозволяє обробляти спеціальні символи (наприклад, `.`, `*`, `[`) як звичайні, додаючи перед ними зворотний слеш (`\`).
- **Контекст**: Використовується для пошуку або валідації текстів, що містять метасимволи регулярних виразів, наприклад, крапки в URL або дужки в коді.
- **Основні компоненти**:
  - **Символ `\`**: Екранує метасимволи (`.`, `*`, `+`, `?`, `|`, `()`, `[]`, `{}`, `/`, `\`).
  - **Екранування в конструкторі**: Подвійний `\` у `new RegExp`, оскільки `\` також екранується в JavaScript-строках.
- **Особливості**:
  - Без екранування метасимволи інтерпретуються як оператори.
  - Екранування потрібне для точного зіставлення символів, таких як `$` або `^`.

## Приклади коду

### 1. Екранування крапки

Пошук буквального символу `.`.

```javascript
const str = "file.txt";
const regex = /\./g;
console.log(str.match(regex)); // ["."]
```

### 2. Екранування кількох метасимволів

Пошук послідовності `(*)`.

```javascript
const str = "Code (*)";
const regex = /\(\*\)/g;
console.log(str.match(regex)); // ["(*)"]
```

### 3. Екранування в конструкторі

Використання `new RegExp` для пошуку крапки.

```javascript
const str = "test.txt";
const regex = new RegExp("\\.", "g");
console.log(str.match(regex)); // ["."]
```

### 4. Екранування зворотного слеша

Пошук `\` у строці.

```javascript
const str = "path\\to\\file";
const regex = /\\/g;
console.log(str.match(regex)); // ["\", "\"]
```

## Особливості для співбесід — Питання та відповіді

### Що таке екранування в регулярних виразах?

- **Відповідь**: Додавання `\` перед метасимволами, щоб вони оброблялися як звичайні символи.
  ```javascript
  console.log("a.b".match(/\./)); // ["."]
  ```

### Які символи потрібно екранувати?

- **Відповідь**: Метасимволи: `.`, `*`, `+`, `?`, `|`, `()`, `[]`, `{}`, `/`, `\`, `^`, `$`.
  ```javascript
  console.log("[test]".match(/\[test\]/)); // ["[test]"]
  ```

### Як екранувати в `new RegExp`?

- **Відповідь**: Використовуйте подвійний `\`, оскільки `\` екранується в JavaScript-строках.
  ```javascript
  const regex = new RegExp("\\*", "g");
  console.log("a*b".match(regex)); // ["*"]
  ```

### Чи потрібно екранувати літери чи цифри?

- **Відповідь**: Ні, звичайні символи (літери, цифри) не потребують екранування.
  ```javascript
  console.log("abc".match(/abc/)); // ["abc"]
  ```

## Поради

- **Перевірка**: Завжди перевіряйте, чи символ є метасимволом, щоб уникнути помилок.
- **Конструктор**: У `new RegExp` подвоюйте `\` для коректного екранування.
- **Тестування**: Використовуйте regex101.com для перевірки екранованих виразів.
- **Простота**: Уникайте надмірного екранування звичайних символів.

## Додаткові деталі

- **Метасимволи**: `.`, `*`, `+`, `?`, `|`, `()`, `[]`, `{}`, `/`, `\`, `^`, `$`.
- **Сумісність**: Екранування працює однаково у всіх браузерах.
- **Обмеження**: Неправильне екранування в `new RegExp` може призвести до помилок синтаксису.