# Детальний конспект: Квантифікатори в регулярних виразах

## Загальна інформація

- **Опис**: Квантифікатори (`*`, `+`, `?`, `{n,m}`) у регулярних виразах визначають, скільки разів шаблон або символ може повторюватися.
- **Контекст**: Використовуються для пошуку повторюваних символів, валідації (наприклад, номери телефонів) або парсингу тексту.
- **Основні компоненти**:
  - `*`: 0 або більше повторень.
  - `+`: 1 або більше повторень.
  - `?`: 0 або 1 повторення.
  - `{n}`: Точно `n` повторень.
  - `{n,}`: `n` або більше повторень.
  - `{n,m}`: Від `n` до `m` повторень.
- **Особливості**:
  - За замовчуванням квантифікатори "жадібні" (greedy), зіставляють максимум символів.
  - Можна зробити "лінивими" (lazy) за допомогою `?`.

## Приклади коду

### 1. Квантифікатор `*`

Пошук нуля або більше цифр.

```javascript
const str = "abc123def";
const regex = /\d*/g;
console.log(str.match(regex)); // ["", "123", ""]
```

### 2. Квантифікатор `+`

Пошук однієї або більше літер.

```javascript
const str = "aaa bbb";
const regex = /[a-z]+/g;
console.log(str.match(regex)); // ["aaa", "bbb"]
```

### 3. Квантифікатор `?`

Пошук "http" або "https".

```javascript
const str = "http:// https://";
const regex = /https?/g;
console.log(str.match(regex)); // ["http", "https"]
```

### 4. Квантифікатор `{n,m}`

Пошук груп із 2–4 цифр.

```javascript
const str = "12 123 1234 12345";
const regex = /\d{2,4}/g;
console.log(str.match(regex)); // ["12", "123", "1234", "1234"]
```

## Особливості для співбесід — Питання та відповіді

### Що таке квантифікатори в регулярних виразах?

- **Відповідь**: Символи, що визначають кількість повторень шаблону (`*`, `+`, `?`, `{n,m}`).
  ```javascript
  console.log("aaa".match(/a+/)); // ["aaa"]
  ```

### Чим відрізняються `*`, `+` і `?`?

- **Відповідь**: `*` — 0 або більше, `+` — 1 або більше, `?` — 0 або 1.
  ```javascript
  console.log("ab".match(/a*/)); // ["a"]
  console.log("ab".match(/a+/)); // ["a"]
  console.log("ab".match(/a?/)); // ["a", ""]
  ```

### Як працює `{n,m}`?

- **Відповідь**: Зіставляє від `n` до `m` повторень шаблону.
  ```javascript
  console.log("12345".match(/\d{2,3}/g)); // ["123", "45"]
  ```

### Що означає "жадібний" квантифікатор?

- **Відповідь**: Зіставляє максимум символів. Наприклад, `.*` захопить усе до кінця.
  ```javascript
  console.log("<p>text</p>".match(/<.*>/)); // ["<p>text</p>"]
  ```

## Поради

- **Точність**: Указуйте чіткі межі `{n,m}`, щоб уникнути надмірного зіставлення.
- **Тестування**: Перевіряйте квантифікатори на regex101.com.
- **Оптимізація**: Уникайте `.*` або `.+` для великих текстів, це може бути повільно.
- **Лінивий режим**: Додавайте `?` до квантифікаторів, якщо потрібен мінімальний збіг.

## Додаткові деталі

- **Квантифікатори**: `*` (0+), `+` (1+), `?` (0 або 1), `{n}` (точно n), `{n,}` (n+), `{n,m}` (від n до m).
- **Сумісність**: Повна підтримка у всіх браузерах.
- **Обмеження**: Жадібні квантифікатори можуть викликати проблеми продуктивності.