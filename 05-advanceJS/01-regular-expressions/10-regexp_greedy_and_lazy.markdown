# Детальний конспект: Жадібний і ледачий режими в регулярних виразах

## Загальна інформація

- **Опис**: Квантифікатори в регулярних виразах за замовчуванням "жадібні" (greedy), зіставляючи максимум символів. Ледачий режим (lazy) активується додаванням `?`, щоб зіставляти мінімум символів.
- **Контекст**: Використовується для точного парсингу HTML, JSON або інших структурованих текстів, де потрібно обмежити збіг.
- **Основні компоненти**:
  - **Жадібний режим**: `*`, `+`, `{n,m}` зіставляють максимум символів.
  - **Ледачий режим**: `*?`, `+?`, `{n,m}?` зіставляють мінімум символів.
- **Особливості**:
  - Жадібний режим може "захопити" більше, ніж потрібно.
  - Ледачий режим корисний для парсингу вкладених структур.

## Приклади коду

### 1. Жадібний режим

Захоплення всього між `<` і `>`.

```javascript
const str = "<p>text</p><div>content</div>";
const regex = /<.*>/g;
console.log(str.match(regex)); // ["<p>text</p><div>content</div>"]
```

### 2. Ледачий режим

Захоплення лише першого тегу.

```javascript
const str = "<p>text</p><div>content</div>";
const regex = /<.*?>/g;
console.log(str.match(regex)); // ["<p>", "</p>", "<div>", "</div>"]
```

### 3. Ледачий режим із `+`

Пошук однієї або більше цифр мінімально.

```javascript
const str = "12345";
const regex = /\d+?/g;
console.log(str.match(regex)); // ["1", "2", "3", "4", "5"]
```

### 4. Ледачий режим із `{n,m}`

Пошук 2–4 цифр мінімально.

```javascript
const str = "123456";
const regex = /\d{2,4}?/g;
console.log(str.match(regex)); // ["12", "34", "56"]
```

## Особливості для співбесід — Питання та відповіді

### Що таке жадібний режим у регулярних виразах?

- **Відповідь**: Квантифікатори зіставляють максимум символів.
  ```javascript
  console.log("<p>text</p>".match(/<.*>/)); // ["<p>text</p>"]
  ```

### Як увімкнути ледачий режим?

- **Відповідь**: Додайте `?` після квантифікатора (`*?`, `+?`, `{n,m}?`).
  ```javascript
  console.log("<p>text</p>".match(/<.*?>/)); // ["<p>"]
  ```

### Коли використовувати ледачий режим?

- **Відповідь**: Для парсингу вкладених структур, щоб уникнути надмірного захоплення.
  ```javascript
  console.log("<a><b>".match(/<.*?>/g)); // ["<a>", "<b>"]
  ```

### Чи впливає ледачий режим на продуктивність?

- **Відповідь**: Може бути повільнішим через додаткові перевірки, але корисний для точності.
  ```javascript
  console.log("abc".match(/a.*?c/)); // ["abc"]
  ```

## Поради

- **Вибір режиму**: Використовуйте ледачий режим для парсингу тегів або вкладених даних.
- **Тестування**: Перевіряйте жадібні та ледачі вирази на regex101.com.
- **Оптимізація**: Уникайте надмірного використання `.*?` для великих текстів.
- **Альтернативи**: Для складних структур розгляньте парсери (наприклад, DOMParser для HTML).

## Додаткові деталі

- **Жадібний режим**: `*`, `+`, `{n,m}` захоплюють максимум.
- **Ледачий режим**: `*?`, `+?`, `{n,m}?` захоплюють мінімум.
- **Сумісність**: Повна підтримка у всіх браузерах.
- **Обмеження**: Ледачий режим може ускладнити дебагінг складних виразів.