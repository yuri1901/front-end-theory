# Детальний конспект: Катастрофічний відступ у регулярних виразах

## Загальна інформація

- **Опис**: Катастрофічний відступ (catastrophic backtracking) — це проблема продуктивності, коли регулярний вираз із вкладеними квантифікаторами (`*`, `+`, `{n,m}`) викликає експоненційне зростання обчислень.
- **Контекст**: Виникає при обробці великих текстів із неоднозначними шаблонами, наприклад, парсинг HTML.
- **Основні компоненти**:
  - **Вкладені квантифікатори**: Наприклад, `(.*)*` або `(.+)+`.
  - **Неоднозначність**: Шаблони, що допускають багато варіантів зіставлення.
- **Особливості**:
  - Може призвести до зависання або краху програми.
  - Уникається оптимізацією шаблонів або використанням ледачого режиму.

## Приклади коду

### 1. Проблемний шаблон

Вкладений квантифікатор викликає відступ.

```javascript
const str = "a".repeat(30);
const regex = /(a+)+b/;
console.log(regex.test(str)); // Може зависнути для довгих строк
```

### 2. Оптимізований шаблон

Використання ледачого режиму.

```javascript
const str = "a".repeat(30);
const regex = /(a+?)b/;
console.log(regex.test(str)); // Швидше, без відступу
```

### 3. Уникнення вкладених груп

Пошук без вкладених квантифікаторів.

```javascript
const str = "<tag>text</tag>";
const regex = /<[^>]+>/g;
console.log(str.match(regex)); // ["<tag>", "</tag>"]
```

### 4. Тестування відступу

Перевірка на довгій строці.

```javascript
const str = "a".repeat(20) + "b";
const regex = /a*b/;
console.log(regex.test(str)); // Швидко, без відступу
```

## Особливості для співбесід — Питання та відповіді

### Що таке катастрофічний відступ?

- **Відповідь**: Експоненційне зростання обчислень через неоднозначні шаблони з вкладеними квантифікаторами.
  ```javascript
  console.log("aaa".match(/(a+)+/)); // Може бути повільним
  ```

### Як уникнути катастрофічного відступу?

- **Відповідь**: Використовуйте ледачий режим, уникайте вкладених квантифікаторів, спрощуйте шаблони.
  ```javascript
  console.log("aaa".match(/a+?/)); // Ледачий режим
  ```

### Які шаблони викликають відступ?

- **Відповідь**: Вкладені `*`, `+`, `{n,m}` у неоднозначних шаблонах.
  ```javascript
  console.log("aaa".match(/(a*)*b/)); // Проблемний шаблон
  ```

### Чи можна протестувати відступ?

- **Відповідь**: Так, на regex101.com із довгими строками або інструментами дебагінгу.
  ```javascript
  console.log("a".repeat(10).match(/a*b/)); // Безпечний шаблон
  ```

## Поради

- **Оптимізація**: Уникайте `.*` або `.+` у складних виразах.
- **Ледачий режим**: Додавайте `?` до квантифікаторів.
- **Тестування**: Перевіряйте шаблони на великих даних.
- **Альтернативи**: Для складних парсингів використовуйте парсери замість регулярних виразів.

## Додаткові деталі

- **Причина**: Неоднозначність у зіставленні викликає багато спроб відступу.
- **Сумісність**: Усі браузери схильні до відступу, якщо шаблон погано оптимізований.
- **Обмеження**: Складно передбачити для дуже великих текстів.