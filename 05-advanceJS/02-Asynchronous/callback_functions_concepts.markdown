# Callback-функції: Детальний конспект за матеріалами MDN

## Загальна інформація

- **Опис**: Callback-функція — це функція, передана як аргумент іншій функції, яка викликається для виконання певної дії в певний момент (наприклад, після завершення асинхронної операції).
- **Призначення**: Дозволяє гнучко розширювати поведінку функцій і обробляти асинхронні події.
- **Особливості**: Може бути анонімною або іменованою, синхронною або асинхронною.
- **Контекст**: Широко використовується в JavaScript для обробки подій, таймерів і колбеків у API.

## 1. Визначення та основи callback-функцій
- **Опис**: Callback — це функція, яка передається як параметр і викликається всередині іншої функції. Вона дозволяє виконати код у відповідь на певну подію чи результат.
- **Типи**:
  - **Синхронні**: Виконуються одразу, наприклад, у мапуванні масиву.
  - **Асинхронні**: Виконуються пізніше, наприклад, у `setTimeout` чи `fetch`.
- **Приклад (синхронний)**:
  ```javascript
  function greet(name, callback) {
    console.log(`Привіт, ${name}`);
    callback();
  }
  greet("Іван", () => console.log("Вітання завершено"));
  // Виведе: Привіт, Іван, Вітання завершено
  ```
- **Приклад (асинхронний)**:
  ```javascript
  setTimeout(() => console.log("Затримка 1s"), 1000);
  console.log("Початок"); // Виконується одразу
  // Виведе: Початок, (після 1s) Затримка 1s
  ```

## 2. Використання callback-функцій
- **Опис**: Callback-функції часто застосовуються в JavaScript для асинхронних операцій, обробки подій і ітерацій.
- **Типові сценарії**:
  - **Таймери**: `setTimeout`, `setInterval`.
  - **Події**: Обробники типу `addEventListener`.
  - **Масиви**: Методи типу `map`, `forEach`.
- **Приклад (масив)**:
  ```javascript
  const numbers = [1, 2, 3];
  numbers.forEach(num => console.log(num * 2)); // Виведе: 2, 4, 6
  ```
- **Приклад (подія)**:
  ```javascript
  document.addEventListener("click", () => console.log("Клікнуто"));
  ```

## 3. Проблеми з callback-функціями
- **Опис**: Надмірне вкладення callback-функцій (відоме як "callback hell") ускладнює код і його підтримку.
- **Приклад "callback hell"**:
  ```javascript
  setTimeout(() => {
    console.log("1");
    setTimeout(() => {
      console.log("2");
      setTimeout(() => console.log("3"), 1000);
    }, 1000);
  }, 1000);
  ```
- **Рішення**: Використання промісів або `async/await` для спрощення.
  ```javascript
  async function sequence() {
    await new Promise(res => setTimeout(() => res(console.log("1")), 1000));
    await new Promise(res => setTimeout(() => res(console.log("2")), 1000));
    await new Promise(res => setTimeout(() => res(console.log("3")), 1000));
  }
  sequence();
  ```

## Особливості для співбесід — Питання та відповіді

### 1. Що таке callback-функція?
- **Відповідь**: Це функція, передана як аргумент іншій функції для виклику в певний момент.
  ```javascript
  function call(callback) { callback(); }
  call(() => console.log("Callback!"));
  ```

### 2. У чому різниця між синхронним і асинхронним callback?
- **Відповідь**: Синхронний виконується одразу (наприклад, `forEach`), асинхронний — пізніше (наприклад, `setTimeout`).
  ```javascript
  [1].forEach(n => console.log(n)); // Синхронно
  setTimeout(() => console.log("Асинхронно"), 0);
  ```

### 3. Як працює "callback hell" і як його уникнути?
- **Відповідь**: "Callback hell" — це вкладені колбеки. Уникайте за допомогою промісів чи `async/await`.
  ```javascript
  // Callback hell
  setTimeout(() => setTimeout(() => console.log("Глибоко"), 1000), 1000);
  // Проміс
  Promise.resolve().then(() => console.log("Плоско"));
  ```

### 4. Де callback-функції використовуються в JavaScript?
- **Відповідь**: У таймерах (`setTimeout`), подіях (`addEventListener`), методах масивів (`map`).
  ```javascript
  document.addEventListener("click", () => console.log("Клік"));
  ```

### 5. Чи можна передати іменовану функцію як callback?
- **Відповідь**: Так, можна передати як іменовану, так і анонімну функцію.
  ```javascript
  function sayHi() { console.log("Привіт"); }
  setTimeout(sayHi, 1000); // Іменована
  setTimeout(() => console.log("Анонімна"), 1000);
  ```

## Поради
- **Розумійте контекст**: Переконайтеся, що callback викликається з правильним `this`.
- **Уникайте вкладень**: Переходьте на проміси чи `async/await` при складних сценаріях.
- **Тестуйте асинхронність**: Перевіряйте затримки в `setTimeout` чи `setInterval`.
- **Використовуйте іменовані функції**: Для читабельності складних callback-логік.
- **Оптимізуйте**: Поєднуйте з подіями для інтерактивності.
- **Практикуйте**: Пишіть приклади з `forEach` і `addEventListener`.